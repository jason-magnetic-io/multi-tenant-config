version: 2
defaults: &defaults
  docker:
    - image: google/cloud-sdk@sha256:126a49cfa2aa6e20d561fa14999bf657bc341efeba04939bd2f612bf843d12a6
jobs:
  deploy:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - run:
          name: Install utils
          command: |
            apt-get update
            apt-get install jq
      - run:
          name: Deploy
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > gcloud-service-key.json
            set -x
            gcloud auth activate-service-account --key-file gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            EXISTING_CLUSTER=$(gcloud container clusters list --format="value(name)" --filter="name=$GOOGLE_CLUSTER_NAME")
            if [ "${EXISTING_CLUSTER}" != $GOOGLE_CLUSTER_NAME ]
            then
              # Create cluster if it doesn't already exist
              gcloud --quiet container clusters create $GOOGLE_CLUSTER_NAME --num-nodes=1
            else
              gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME
            fi
            FULL_DOCKER_IMAGE_NAME=$(cat workspace/full_docker_image_name)
            # Replace DOCKER_IMAGE_NAME placeholder in manifest with actual image name
            KUBE_CONFIG=$(cat hello-app/manifests/helloweb-all-in-one.yaml.template | sed "s|DOCKER_IMAGE_NAME|$FULL_DOCKER_IMAGE_NAME|g")
            echo "$KUBE_CONFIG" | kubectl apply -f -
            # Wait for deployment to finish
            kubectl rollout status deployment/helloweb
            kubectl get pods
      - run:
          name: Test deployed application
          command: |
            # Wait for external ip to be assigned
            sleep 60
            kubectl get service helloweb
            EXTERNAL_IP=$(kubectl get service helloweb -o json | jq -r ".status.loadBalancer.ingress[0].ip")
            curl "http://$EXTERNAL_IP"
      - run:
          name: Tear down application and resources if configured (since this is a demo)
          command: |
            if [ "${DELETE_CLUSTER_AT_END_OF_TEST}" == "true" ]
            then
              kubectl delete service helloweb
              gcloud --quiet container clusters delete $GOOGLE_CLUSTER_NAME
            fi
workflows:
  version: 2
  build-deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only: master
